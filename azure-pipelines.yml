# Ruby
# Package your Ruby project.
# Add steps that install rails, analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/ruby
trigger:
  - master
  - pr
variables:
    XSECRET: $(TEST_SECRET)
    YSECRET: ${TEST_SECRET}

jobs:
- job: main
  strategy:
   matrix:
    # u14-A:
    # - KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1404-one"
    # u14-B:
    # - KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1404-three"

    # u16-A:
    # - KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1604-one"
    # u16-B:
    # - KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1604-two"
    # u16-C:
    #  - KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1604-three"

    # u18-A:
    #  KITCHEN_COMMAND="bundle exec kitchen test simple-ubuntu1804-one"
    u18-B:
      KITCHEN_INSTANCE: simple-ubuntu1804-three
      KITCHEN_COMMAND: bundle exec kitchen test simple-ubuntu1804-three
      KITCHEN_ANSIBLE: three
    
    # cluster:
    #     KITCHEN_INSTANCE: simple-ubuntu1804-three
    #     KITCHEN_COMMAND: ./test/test-cluster.sh
    #     KITCHEN_ANSIBLE: three

      
  pool:
    vmImage: 'ubuntu-latest'
  
  steps:
  - task: UseRubyVersion@0
    inputs:
      versionSpec: '>= 2.5'
  - script: | 
            set -x
            # echo $(XSECRET) > /tmp/x.file
            # ls -l /tmp/x.file
            # cat /tmp/x.file
            # cat /tmp/x.file | wc -l 
            # md5sum /tmp/x.file
            echo "x() $(XSECRET)"
            echo "x{} ${XSECRET}"
            echo "y() $(YSECRET)"
            echo "y{} ${YSECRET}"
            echo "t() $(TEST_SECRET)"
            echo "t{} ${TEST_SECRET}"
            echo "SECRET{} ${SECRET}"
            echo "SECRET $MySecret"
            echo "SECRET{} ${MySecret}"
            echo "SECRET() ${MySecret}"
            echo "***************************************" >> /tmp/file.txt
            echo "x() $(XSECRET)" >> /tmp/file.txt
            echo "SECRET YYYYY$MySecretWWWWW" >> /tmp/file.txt
            echo "***************************************" >> /tmp/file.txt
            cat /tmp/file.txt
            exit 1
    env:
      MySecret: $SECRET
    displayName: list

     
  - script: |
            # Make sure everything's up to date.
            sudo apt-get update -qq
            sudo apt-get install -qq python-apt python-pycurl git python-pip ruby ruby-dev build-essential autoconf
            gem install bundler
            # sudo locale-gen en_US.UTF-8
            # sudo dpkg-reconfigure locales
    displayName: 'apt packages &  bundle install'
  - script: |
            bash ./test/ansible-setup.sh "${KITCHEN_ANSIBLE}"
            bash ./test/setup_roles.sh
    displayName: 'Ansible & helper role setup'
  - script: |
            bundle install
    displayName: 'Bundle install'
  - script: |  
            CURRENT_DIR="$(pwd)"
            cd ..
            ln -s "${CURRENT_DIR}" ansible-concourse
            cd ansible-concourse
            LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 ${KITCHEN_COMMAND}
    displayName: 'Run kitchen test for $KITCHEN_INSTANCE'
    continueOnError: true

  - script: |  
            ls .kitchen
            bundle exec kitchen exec $KITCHEN_INSTANCE -c "ps aux | grep concour | grep -v grep"
            echo "******** Netstatl"
            bundle exec kitchen exec $KITCHEN_INSTANCE -c "apt-get update && apt-get install net-tools"
            bundle exec kitchen exec $KITCHEN_INSTANCE -c "sudo netstat -antlp"
            echo "******** WORKER LOG"
            bundle exec kitchen exec $KITCHEN_INSTANCE -c "sudo cat /var/log/concourse/concourseci_worker.log"
            echo "******** WEB LOG"
            bundle exec kitchen exec $KITCHEN_INSTANCE -c "sudo cat /var/log/concourse/concourseci_web.log"
    displayName: 'list errors'



# - job: test
#   dependsOn: main
#   condition: failed() # this job will only run if Foo fails
#   steps:
#   - script: |  
#             CURRENT_DIR="$(pwd)"
#             cd ..
#             ln -s "${CURRENT_DIR}" ansible-concourse
#             cd ansible-concourse
#             ls .kitchen
#             bundle exec kitchen exec $KITCHEN_INSTANCE -c "ps aux | grep concour | grep -v grep"
#             echo "I was triggred"
#     displayName: 'list errors'