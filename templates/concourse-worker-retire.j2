#!/bin/sh
# {{ ansible_managed }}
set -e

## Retire config
export CONCOURSE_NAME="{{ concourse_worker_options_combined['CONCOURSE_NAME'] | default('$(hostname)') }}"
export CONCOURSE_TSA_HOST="{{ concourse_web_options_combined['CONCOURSE_TSA_HOST'] }}"
export CONCOURSE_TSA_PORT="{{ concourse_web_options_combined['CONCOURSE_TSA_PORT'] | default('2222') }}"
export CONCOURSE_TSA_PUBLIC_KEY="{{ concourse_worker_options_combined['CONCOURSE_TSA_HOST_KEY'] }}.pub"
export CONCOURSE_TSA_WORKER_PRIVATE_KEY="{{ concourse_worker_options_combined['CONCOURSE_TSA_WORKER_PRIVATE_KEY'] }}"

## Helper variables
CONCOURSE_BIN_DIR="{{ concourseci_bin_dir }}"
CONCOURSE_LOG_FILE="{{ concourseci_log_worker }}"
SLEEP=5
MAX_TRIES=12
temp_file="$(mktemp -d)/retire.log"

log(){
  echo "$(date) ${1}" >> "${CONCOURSE_LOG_FILE}"
}

exit_clean_up(){
  rm "${temp_file}"
  exit "${1}"
}

log "Starting $0"

# Loop at most $MAX_TRIES untill worker is retired
for i in $(seq $MAX_TRIES); do
  set +e
  "${CONCOURSE_BIN_DIR}"/concourse retire-worker > "${temp_file}" 2>&1
  rc="$?"
  set -e
  if [ "${rc}" -eq 0 ]; then
    if grep "retire-worker.worker-not-found" "${temp_file}" > /dev/null 2>&1; then
      log "Officially retired ${CONCOURSE_NAME} worker"
      exit_clean_up 0
    else
      echo -n "."
      log "Still waiting #${i}. I will try again in ${SLEEP}"
      sleep ${SLEEP}
    fi
  else
    log "Got an error while retiring ${CONCOURSE_NAME}"
    cat "${temp_file}" >> "${CONCOURSE_LOG_FILE}"
    exit_clean_up 1
    fi
done

# if we reached here timeout
log "timeout after ${CONCOURSE_NAME}"
cat "${temp_file}" >> "${CONCOURSE_LOG_FILE}"
exit_clean_up 124
