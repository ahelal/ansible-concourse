#!/bin/bash
### BEGIN INIT INFO
# Provides:          concourse-worker
# Required-Start:    $local_fs $network $remote_fs $syslog
# Required-Stop:     $local_fs $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: concourse worker
# Description:       This script starts and stops the concourse worker service daemon
### END INIT INFO
# {{ ansible_managed }}

NAME="con-worker"
DESC="concourse-worker"

RUN_AS_USER="root"
RUN_AS_GROUP="root"

BASE_DIR="{{ concourseci_bin_dir }}"
GREP_NAME="{{ concourseci_bin_dir }}/concourse worker"

RUN_CMD="{{ concourseci_bin_dir }}/concourse-worker"
RETIRE_CMD="{{ concourseci_bin_dir }}/concourse-worker-retire"
DAEMON_OPTS=""

STOPCMD="kill -9"
#How many sec to wait before checking if proc is up
SLEEP_FOR=2

IGNORE_PLAY_PID=1

PROG_PID() {
    check_prog=$(ps aux| grep -e "$GREP_NAME" | grep -v grep | awk '{ print $2 }' )
    echo $check_prog
}

start() {
    PID=$(PROG_PID)
    if  [ -n "$PID" ] ; then
        echo "$NAME is already running (PID: $PID)"
    else
        echo -n  "Retiring worker in case stale worker left over from unexpected restart..."
        $RETIRE_CMD
        echo -n  "Starting $NAME "
        [ $IGNORE_PLAY_PID  == 1 ] && rm -f $BASE_DIR/RUNNING_PID
        #Start quite background uid and gid
        start-stop-daemon --start --background --name $NAME --chdir $BASE_DIR --chuid $RUN_AS_USER --group $RUN_AS_GROUP --exec $RUN_CMD

        [ "$?" -ne 0 ] && echo "[ FAILED ]" && exit 1
        let kwait=$SLEEP_FOR
        count=0;
        until [ $count -gt $kwait ]
        do
            echo -n "."
            sleep 1
            let count=$count+1;
        done
        PID=$(PROG_PID)
        if [ -n "$PID" ]; then
            echo "[ OK ]"
        else
            echo "[ FAILED ]"
            exit 1
        fi
    fi
}

stop() {
    PID=$(PROG_PID)
    if [ -n "$PID" ]; then
        echo -n  "Stoping $NAME "
        kill -9 $PID
        [ "$?" -ne 0 ] && echo "[ FAILED ]" && exit 1

        let kwait=$SLEEP_FOR
        count=0;
        until [ $count -gt $kwait ]
        do
          echo -n ".";
          sleep 1
          let count=$count+1;
        done
        PID=$(PROG_PID)
        if [ -n "$PID" ]; then
            echo "[ FAILED ]"
            exit 1
        else
            echo "[ OK ] retiring worker ..."
            $RETIRE_CMD
        fi
    else
        echo "$NAME not running."
    fi
}

status() {
    PID=$(PROG_PID)
    if [ -n "$PID" ]; then
        echo "$NAME is running with PID:$PID"
    else
        echo "$NAME is not running"
    fi
}

case "$1" in
 start)
        start ;;
 stop)
        stop ;;
 restart)
       stop
       start ;;
 status)
       status ;;
*)
        echo "Usage: $0 {start|stop|restart|status}"
        exit 1 ;;
esac
exit 0